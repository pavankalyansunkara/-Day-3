CREATE TABLE department (id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(50) NOT NULL);

INSERT INTO department (name) VALUES ('Computer Science'),('Electrical Engineering'),('Mechanical Engineering');

CREATE TABLE year (id INT AUTO_INCREMENT PRIMARY KEY, year INT NOT NULL);

INSERT INTO year (year) VALUES(1),(2),(3),(4);

CREATE TABLE student (id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(100) NOT NULL,department_id INT, year_id INT,FOREIGN KEY (department_id) REFERENCES department(id),FOREIGN KEY (year_id) REFERENCES year(id));

INSERT INTO student (name, department_id, year_id) VALUES
('John Doe', 1, 1),  -- Computer Science, Year 1
('Jane Smith', 1, 2), -- Computer Science, Year 2
('David Johnson', 1, 3), -- Computer Science, Year 3
('Emma Brown', 1, 4), -- Computer Science, Year 4
('Michael Lee', 1, 1), -- Computer Science, Year 1
('Emily Davis', 2, 1), -- Electrical Engineering, Year 1
('James Wilson', 2, 2), -- Electrical Engineering, Year 2
('Olivia Martinez', 2, 3), -- Electrical Engineering, Year 3
('William Anderson', 2, 4), -- Electrical Engineering, Year 4
('Sophia Taylor', 2, 1), -- Electrical Engineering, Year 1
('Liam Moore', 3, 1), -- Mechanical Engineering, Year 1
('Ava Jackson', 3, 2), -- Mechanical Engineering, Year 2
('Noah White', 3, 3), -- Mechanical Engineering, Year 3
('Isabella Harris', 3, 4), -- Mechanical Engineering, Year 4
('Ethan Clark', 3, 1); -- Mechanical Engineering, Year 1

To display students from the Computer Science (CSE) department:
SELECT * FROM student WHERE department_id = ( SELECT id FROM department WHERE name = 'Computer Science');

To display only the department name using the student table:
SELECT department.name FROM student JOIN department ON student.department_id = department.id;

To display students sorted by department and first name:
SELECT student.*, department.name AS department_name FROM student JOIN department ON student.department_id = department.id ORDER BY department.name, student.name;
In MongoDB, we don't create tables like in SQL databases; instead, we create collections. Each collection stores documents in BSON format (Binary JSON). Here's how you can create similar structures in MongoDB:

1. **Students Collection**:
```javascript
db.createCollection("students");

db.students.insertMany([
   {
     student_id: 1,
     name: "John Doe",
     age: 20,
     department_id: 101,
     year_id: 2024
   },
   {
     student_id: 2,
     name: "Jane Smith",
     age: 22,
     department_id: 102,
     year_id: 2023
   },
   // More student documents can be added here
]);
```

2. **Department Collection**:
```javascript
db.createCollection("department");

db.department.insertMany([
   {
     department_id: 101,
     department_name: "Computer Science"
   },
   {
     department_id: 102,
     department_name: "Mathematics"
   },
   // More department documents can be added here
]);
```

3. **Year Student Collection**:
```javascript
db.createCollection("year_student");

db.year_student.insertMany([
   {
     year_id: 2024,
     year_name: "Fourth Year"
   },
   {
     year_id: 2023,
     year_name: "Third Year"
   },
   // More year student documents can be added here
]);
```

Remember, MongoDB is schemaless, meaning that each document in a collection can have a different structure. However, for consistency and ease of querying, it's recommended to maintain a consistent schema across documents within a collection, as demonstrated above.
